# This starter workflow is for a CMake project running on multiple platforms.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake

on:
  push:
  pull_request:

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Ensure that feedback is delivered for all matrix combinations.
      fail-fast: false

      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        build_type: [ Release, Debug ]
        c_compiler: [ gcc, clang, cl ]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            shadercross: SDL3_shadercross-VC-x64
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            shadercross: SDL3_shadercross-linux-x64
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            shadercross: SDL3_shadercross-linux-x64
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
            shadercross: SDL3_shadercross-macos-arm64
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            shadercross: SDL3_shadercross-macos-arm64
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Linux dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: >
          sudo apt-get install build-essential git make
          pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev
          libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev
          libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev
          libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev
          libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev
          libpipewire-0.3-dev libwayland-dev libdecor-0-dev liburing-dev

      - name: Download SDL_shadercross
        run: |
          gh run -R libsdl-org/SDL_shadercross download -n ${{ matrix.shadercross }}
          python -c "import shutil,glob;shutil.unpack_archive(glob.glob('SDL*shadercross*')[0],'.')"

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs.
        # These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required
        #  if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed
        #  because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

